require 'rake'
require 'plist'

require_relative 'common'
require_relative 'animation_builder'
require_relative 'tile_builder'
require_relative 'tile_map_builder'
require_relative 'image_builder'

include Common

task :init do

  $project_name     = 'PixelSpaceOdyssey'
  $project_config   = 'Debug'

  $dir_builder      = File.expand_path '.'
  $dir_repo         = File.expand_path '..'
  $dir_project      = resolve_path "#{$dir_repo}/#{$project_name}"

  $dir_out          = "#{$dir_builder}/out"

  $dir_emu          = resolve_path "#{$dir_repo}/Emulator"
  $file_emu_project = resolve_path "#{$dir_emu}/Emulator.pro"

  $dir_art          = resolve_path "#{$dir_repo}/Art"
  $dir_animations   = resolve_path "#{$dir_art}/animations"
  $dir_images       = resolve_path "#{$dir_art}/images"
  $dir_tiles        = resolve_path "#{$dir_art}/tiles"
  $dir_tilemaps     = resolve_path "#{$dir_art}/tilemaps"
end

task :clean => :init do
  FileUtils.rm_rf $dir_out
  FileUtils.mkpath $dir_out
end

desc 'Generate animations'
task :generate_animations => :init do

  Dir["#{$dir_animations}/*.psd"].each { |psd_file|
    AnimationBuilder.generate psd_file, $dir_project
  }

end

desc 'Generate tiles'
task :generate_tiles => [:init] do

  Dir["#{$dir_tiles}/*.psd"].each { |psd_file|
    TileBuilder.generate psd_file, $dir_project
  }

end

desc 'Generate tile maps'
task :generate_tilemaps => [:generate_tiles] do

  tile_set = TileSet.from_psd Dir["#{$dir_tiles}/*.psd"].first

  Dir["#{$dir_tilemaps}/*.psd"].each { |psd_file|
    TileMapBuilder.generate psd_file, tile_set, $dir_project
  }

end

desc 'Generate images'
task :generate_images => [:init] do
  ImageBuilder.generate $dir_images, $dir_project
end

desc 'Generates xcode proj'
task :generate_xcode_proj => :init do

  dir_output = "#{$dir_emu}/Xcode"
  FileUtils.rm_rf dir_output
  FileUtils.mkdir dir_output

  Dir.chdir dir_output do
    exec_shell %(qmake -spec macx-xcode "#{$file_emu_project}"), "Can't generate Xcode project"
  end

  dir_debug = "#{dir_output}/Debug"
  FileUtils.mkpath dir_debug unless File.directory? dir_debug

  FileUtils.cp_r "#{$dir_emu}/Tiles", "#{dir_debug}/"

  file_proj = resolve_path "#{dir_output}/Emulator.xcodeproj"
  exec_shell %(open "#{file_proj}"), "Can't open Xcode project"

end

desc 'Build the app'
task :build => :clean do
  def extract_project_version(dir_project)
    file_plist = resolve_path "#{dir_project}/Version.h"
    source = File.read file_plist
    source =~ /#define\s+PROJECT_VERSION\s+"(\d+\.\d+\.\d+)"/

    not_nil $1
  end

  project_version = extract_project_version $dir_emu

  puts "Project version: #{project_version}"


  dropbox = DropboxDeploy.new $dropbox_access_token
  dropbox.deploy __FILE__




  # cmd = 'xcodebuild'
  # cmd << %( -project "#{$file_emu_project}")
  # cmd << ' -configuration Debug'
  # cmd << %( -target "#{$project_name}")
  # exec_shell cmd, 'Unable to build the project'
  #
  # dir_project = File.dirname $file_emu_project
  # dir_build = File.resolve_path "#{dir_project}/build/#{$project_config}"
  #
  # file_output = "#{$dir_out}/#{$project_name}-#{project_version}.zip"
  # zip_dir dir_build, file_output

end

desc 'Deploys the app'
task :deploy => :build do

  file_build = resolve_path "#{$dir_out}/#{$project_name}-#{$project_version}.zip"
  FileUtils.cp file_build, File.expand_path('~/Dropbox/PSO')

end
